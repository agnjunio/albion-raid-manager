// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

generator typescriptInterfaces {
  provider = "prisma-generator-typescript-interfaces"
  output   = "../../core/generated/types/index.ts"
  prettier = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Guilds and Players
model Guild {
  id                        String        @id @default(uuid())
  name                      String
  icon                      String?
  discordId                 String        @unique
  members                   GuildMember[]
  raids                     Raid[]
  compositions              Composition[]
  // Settings
  adminRoles                String[]      @default([])
  raidRoles                 String[]      @default([])
  compositionRoles          String[]      @default([])
  raidAnnouncementChannelId String?
}

model GuildMember {
  guild                 Guild   @relation(fields: [guildId], references: [id], onDelete: Cascade)
  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  guildId               String
  userId                String
  nickname              String?
  adminPermission       Boolean @default(false)
  raidPermission        Boolean @default(false)
  compositionPermission Boolean @default(false)

  @@id([guildId, userId])
}

model User {
  id             String        @id
  username       String
  avatar         String?
  nickname       String?
  defaultGuildId String?
  GuildMember    GuildMember[]
  RaidSlot       RaidSlot[]
}

// Compositions
model Build {
  id            String      @id @default(uuid())
  composition   Composition @relation(fields: [compositionId], references: [id])
  compositionId String
  raidSlots     RaidSlot[]
  name          String
  role          BuildRole
  comment       String?
  count         Int         @default(1)
}

enum BuildRole {
  CALLER
  TANK
  SUPPORT
  HEALER
  RANGED_DPS
  MELEE_DPS
  BATTLEMOUNT

  @@map("Role")
}

model Composition {
  id        String   @id @default(uuid())
  name      String
  guild     Guild    @relation(fields: [guildId], references: [id])
  guildId   String
  builds    Build[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Raids
model Raid {
  id                    String     @id @default(uuid())
  guild                 Guild      @relation(fields: [guildId], references: [id])
  guildId               String
  description           String
  date                  DateTime
  allowLateJoin         Boolean    @default(true)
  status                RaidStatus @default(SCHEDULED)
  announcementMessageId String?
  slots                 RaidSlot[]
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
}

model RaidSlot {
  id        String    @id @default(uuid())
  name      String
  comment   String?
  raid      Raid?     @relation(fields: [raidId], references: [id])
  raidId    String?
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
  build     Build?    @relation(fields: [buildId], references: [id])
  buildId   String?
  createdAt DateTime  @default(now())
  joinedAt  DateTime?
}

enum RaidStatus {
  SCHEDULED
  OPEN
  CLOSED
  ONGOING
  FINISHED
}

// Sessions
model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}
