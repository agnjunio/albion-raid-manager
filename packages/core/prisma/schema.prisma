// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
  output     = "../src/database/generated/prisma"
}

generator typescriptInterfaces {
  provider          = "prisma-generator-typescript-interfaces"
  output            = "../../types/generated/index.ts"
  prettier          = true
  optionalNullables = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Servers and Users
model Server {
  id      String         @id // Discord server ID
  name    String
  icon    String?
  members ServerMember[]
  raids   Raid[]
  builds  Build[]

  // Permissions configuration
  adminRoles                String[] @default([])
  raidRoles                 String[] @default([])
  compositionRoles          String[] @default([])
  raidAnnouncementChannelId String?

  // Registration configuration
  memberRoleId  String?
  friendRoleId  String?
  serverGuildId String?

  // Audit configuration
  auditChannelId String?
}

model ServerMember {
  server                Server  @relation(fields: [serverId], references: [id], onDelete: Cascade)
  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  serverId              String
  userId                String
  nickname              String?
  adminPermission       Boolean @default(false)
  raidPermission        Boolean @default(false)
  compositionPermission Boolean @default(false)

  // Albion player data
  albionPlayerId String?
  albionGuildId  String?
  killFame       Int      @default(0)
  deathFame      Int      @default(0)
  lastUpdated    DateTime @default(now())

  @@id([serverId, userId])
}

model User {
  id              String         @id
  username        String
  avatar          String?
  nickname        String?
  defaultServerId String?
  ServerMember    ServerMember[]
  RaidSlot        RaidSlot[]
}

// Raids
model Raid {
  id                    String       @id @default(uuid())
  type                  RaidType     @default(FIXED)
  contentType           ContentType?
  maxPlayers            Int?
  location              String?
  serverId              String
  server                Server       @relation(fields: [serverId], references: [id])
  announcementMessageId String?
  status                RaidStatus   @default(SCHEDULED)
  title                 String       @default("Raid")
  description           String?
  note                  String?
  date                  DateTime
  slots                 RaidSlot[]
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
}

enum RaidType {
  FIXED
  FLEX
}

enum ContentType {
  SOLO_DUNGEON
  OPEN_WORLD_FARMING
  GROUP_DUNGEON
  AVALONIAN_DUNGEON
  ROADS_OF_AVALON
  DEPTHS_DUO
  DEPTHS_TRIO
  OPEN_WORLD_GANKING
  OPEN_WORLD_SMALL_SCALE
  OPEN_WORLD_ZVZ
  HELLGATE_2V2
  HELLGATE_5V5
  MISTS_SOLO
  MISTS_DUO
  OTHER
}

model RaidSlot {
  id        String    @id @default(uuid())
  name      String
  comment   String?
  order     Int       @default(0)
  raid      Raid?     @relation(fields: [raidId], references: [id], onDelete: Cascade)
  raidId    String?
  role      RaidRole?
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
  weapon    String?
  build     Build?    @relation(fields: [buildId], references: [id])
  buildId   String?
  createdAt DateTime  @default(now())
  joinedAt  DateTime?
}

enum RaidStatus {
  SCHEDULED
  OPEN
  CLOSED
  ONGOING
  FINISHED
  CANCELLED
}

enum RaidRole {
  TANK
  SUPPORT
  HEALER
  RANGED_DPS
  MELEE_DPS
  BATTLEMOUNT
}

enum GearSlot {
  MAIN_HAND
  OFF_HAND
  HEAD
  BODY
  FEET
  CAPE
  BAG
  MOUNT
  FOOD
  POTION
  INVENTORY
}

// Builds
model Build {
  id          String       @id @default(uuid())
  name        String
  description String?
  role        RaidRole
  serverId    String
  server      Server       @relation(fields: [serverId], references: [id], onDelete: Cascade)
  pieces      BuildPiece[]
  raidSlots   RaidSlot[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model BuildPiece {
  id          String   @id @default(uuid())
  buildId     String
  build       Build    @relation(fields: [buildId], references: [id], onDelete: Cascade)
  gearSlot    GearSlot
  itemName    String
  quantity    Int      @default(1)
  description String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
}

// Sessions
model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}
