# Albion Raid Manager - Project Overview

This is a monorepo for an Albion Online raid management system built with TypeScript, using Turbo for build orchestration and pnpm for package management.

## Project Structure

### Apps

- **[apps/api](mdc:apps/api)** - Express.js REST API server
- **[apps/web](mdc:apps/web)** - React + Vite frontend application
- **[apps/bot](mdc:apps/bot)** - Discord.js bot for raid management

### Shared Packages

- **[packages/core](mdc:packages/core)** - Shared business logic and types
- **[packages/database](mdc:packages/database)** - Prisma database schema and client
- **[packages/config](mdc:packages/config)** - Shared configuration management
- **[packages/logger](mdc:packages/logger)** - Centralized logging utilities
- **[packages/discord](mdc:packages/discord)** - Discord.js utilities and types
- **[packages/ai](mdc:packages/ai)** - AI/ML utilities for the application

## Key Technologies

- **Build System**: Turbo monorepo with pnpm workspaces
- **Database**: PostgreSQL with Prisma ORM
- **Frontend**: React + Vite + Tailwind CSS + Radix UI
- **Backend**: Express.js with TypeScript
- **Bot**: Discord.js for Discord integration
- **Code Quality**: ESLint + Prettier + TypeScript

## Development Approach

This project uses a **hybrid development approach**:

- **Infrastructure in Docker**: PostgreSQL Database, Redis, Admin tools
- **Applications in Turbo**: API, Web, Bot run locally with hot reload
- **Best of both worlds**: Fast development with reliable infrastructure

## Development Commands

### Infrastructure (Docker)

- `pnpm infra:up` - Start database and Redis
- `pnpm infra:down` - Stop infrastructure
- `pnpm infra:logs` - View infrastructure logs
- `pnpm infra:status` - Check infrastructure status
- `pnpm infra:reset` - Reset infrastructure (removes all data)

### Applications (Turbo)

- `pnpm dev` - Start all applications
- `pnpm api` - Start only the API server
- `pnpm bot` - Start only the Discord bot
- `pnpm web` - Start only the web frontend



## Database Schema

The database uses Prisma with PostgreSQL and includes models for:

- Guilds and Guild Members
- Users
- Raids with different types (FIXED, FLEX)
- Raid Slots and Roles
- Sessions for authentication

The schema is defined in [packages/database/prisma/schema.prisma](mdc:packages/database/prisma/schema.prisma).

## Infrastructure Services

- **PostgreSQL Database** - Main application database (port 5432)
- **Redis** - Session storage and caching (port 6379)
- **Adminer** - Database administration tool (port 8080)
- **Redis Commander** - Redis administration tool (port 8081)

Configuration is in [docker-compose.yml](mdc:docker-compose.yml).
description:
globs:
alwaysApply: false

---
