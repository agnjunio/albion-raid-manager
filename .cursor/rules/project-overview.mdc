---
description: Project overview and development guidelines for the Albion Raid Manager monorepo
globs: ["**/*.ts", "**/*.tsx", "**/*.js", "**/*.jsx", "**/*.md"]
alwaysApply: true
---

# Albion Raid Manager - Project Overview

This is a monorepo for an Albion Online raid management system built with TypeScript, using Turbo for build orchestration and pnpm for package management.

## Project Structure

### Apps

- **[apps/api](mdc:apps/api)** - Express.js REST API server
- **[apps/web](mdc:apps/web)** - React + Vite frontend application
- **[apps/bot](mdc:apps/bot)** - Discord.js bot for raid management

### Shared Packages

- **[packages/core](mdc:packages/core)** - Shared business logic, types, Discord services, Albion API client, database, Redis, configuration, and logging
- **[packages/ai](mdc:packages/ai)** - AI/ML utilities for the application

## Key Technologies

- **Build System**: Turbo monorepo with pnpm workspaces
- **Database**: PostgreSQL with Prisma ORM
- **Frontend**: React + Vite + Tailwind CSS + Radix UI
- **Backend**: Express.js with TypeScript
- **Bot**: Discord.js for Discord integration
- **Code Quality**: ESLint + Prettier + TypeScript

## Development Approach

This project uses a **hybrid development approach**:

- **Infrastructure in Docker**: PostgreSQL Database, Redis, Admin tools
- **Applications in Turbo**: API, Web, Bot run locally with hot reload
- **Best of both worlds**: Fast development with reliable infrastructure

## Import Guidelines

### Prefer `@` Imports Over Relative Imports

When importing from within the same workspace, prefer using `@` imports over relative imports:

```typescript
// ✅ Good - Using @ imports
import { getGuildMember } from "@/utils/discord";
import { type Command } from "@/commands";
import { logger } from "@albion-raid-manager/core/logger";

// ❌ Bad - Using relative imports
import { getGuildMember } from "../../utils/discord";
import { type Command } from "../../commands";
```

### Import Order

1. External packages (discord.js, etc.)
2. Internal packages with `@albion-raid-manager/` prefix
3. Local imports with `@/` prefix
4. Relative imports (only when `@/` is not available)

## Function Parameter Patterns

When writing functions in this codebase, follow these parameter patterns:

### Required Parameters

Use sequential parameters for required values:

```typescript
function example(required1: string, required2: number, required3: boolean) {
  // Implementation
}
```

### Optional Parameters

Use object destructuring for optional parameters:

```typescript
function example(
  required1: string,
  required2: number,
  { optional1 = "default", optional2 = 0, optional3 = false } = {},
) {
  // Implementation
}
```

### Examples

```typescript
// ✅ Good - Required params sequential, optional as object
function createUser(discordId: string, username: string, { nickname, avatar, defaultServerId } = {}) {
  // Implementation
}

// ✅ Good - All required params
function ensureUser(discordUserId: string, username: string) {
  // Implementation
}

// ❌ Bad - Mixed pattern
function badExample(
  required1: string,
  { optional1 } = {},
  required2: number, // Required after optional
) {
  // Implementation
}
```

## Database Transaction Guidelines

### When to Use Transactions

**Use transactions when:**

- Performing multiple database operations in a single function
- Operations need to be atomic (all succeed or all fail)
- Creating related entities that depend on each other
- Updating multiple records that must remain consistent

**Don't use transactions for:**

- Single database operations
- Simple CRUD operations
- Read-only operations
- Operations that don't depend on each other

### Examples

```typescript
// ✅ Good - Single operation, no transaction needed
async function createUser(userData: UserData) {
  return await prisma.user.create({ data: userData });
}

// ✅ Good - Multiple operations, transaction needed
async function createUserWithProfile(userData: UserData, profileData: ProfileData) {
  return await prisma.$transaction(async (tx) => {
    const user = await tx.user.create({ data: userData });
    const profile = await tx.profile.create({
      data: { ...profileData, userId: user.id }
    });
    return { user, profile };
  });
}

// ✅ Good - Related entities, transaction needed
async function ensureUserAndServer(userId: string, serverId: string) {
  return await prisma.$transaction(async (tx) => {
    const user = await tx.user.upsert({ ... });
    const server = await tx.server.upsert({ ... });
    const member = await tx.serverMember.upsert({ ... });
    return { user, server, member };
  });
}
```

## Development Commands

### Infrastructure (Docker)

- `pnpm infra:up` - Start database and Redis
- `pnpm infra:down` - Stop infrastructure
- `pnpm infra:logs` - View infrastructure logs
- `pnpm infra:status` - Check infrastructure status
- `pnpm infra:reset` - Reset infrastructure (removes all data)

### Applications (Turbo)

- `pnpm dev` - Start all applications
- `pnpm api` - Start only the API server
- `pnpm bot` - Start only the Discord bot
- `pnpm web` - Start only the web frontend

## Database Schema

The database uses Prisma with PostgreSQL and includes models for:

- Servers and Server Members
- Users
- Raids with different types (FIXED, FLEX)
- Raid Slots and Roles
- Sessions for authentication
- Audit configuration for user registration monitoring

The schema is defined in [packages/database/prisma/schema.prisma](mdc:packages/database/prisma/schema.prisma).

## Bot Features

### User Registration and Role Management

- **Registration System**: Users can register their Albion Online characters using `/register`
- **Role Assignment**: Automatic role assignment based on guild membership
- **Audit Channel**: Configurable audit logging for user registrations and role assignments
- **Configuration**: Server administrators can configure roles, guild IDs, and audit channels

### Audit Channel Feature

The bot includes an audit channel feature that allows server administrators to monitor user registrations and role assignments:

- **Configuration**: Use `/config audit` to set up audit channel
- **Rich Embeds**: Detailed Discord embeds with player information
- **Non-intrusive**: Audit failures don't break main functionality
- **Security**: Only administrators can configure audit channels

See [AUDIT_CHANNEL_FEATURE.md](mdc:AUDIT_CHANNEL_FEATURE.md) for detailed documentation.

## Infrastructure Services

- **PostgreSQL Database** - Main application database (port 5432)
- **Redis** - Session storage and caching (port 6379)
- **Adminer** - Database administration tool (port 8080)
- **Redis Commander** - Redis administration tool (port 8081)

Configuration is in [docker-compose.yml](mdc:docker-compose.yml).

---

description: Project overview and development guidelines for the Albion Raid Manager monorepo
globs: ["**/*.ts", "**/*.tsx", "**/*.js", "**/*.jsx", "**/*.md"]
alwaysApply: true
