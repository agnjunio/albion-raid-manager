---
description: React development standards and frontend best practices
globs: ["apps/web/**/*.tsx", "apps/web/**/*.ts", "apps/web/**/*.jsx", "apps/web/**/*.js"]
alwaysApply: true
---

# React Coding Standards

## Component Structure

- Use functional components with hooks
- Prefer named exports over default exports
- Use TypeScript for all component props
- Implement proper prop validation with Zod or TypeScript interfaces

## State Management

- Use Redux Toolkit for global state (configured in [apps/web/package.json](mdc:apps/web/package.json))
- Use React Hook Form for form state management
- Use local state with useState for component-specific state
- Use useReducer for complex state logic

## UI Components

- Use Radix UI primitives for accessible components
- Use Tailwind CSS for styling (configured in [apps/web/postcss.config.mjs](mdc:apps/web/postcss.config.mjs))
- Use class-variance-authority for component variants
- Implement proper ARIA attributes for accessibility
- **ALWAYS use UI Button components instead of HTML buttons** - Import from `@/components/ui/button`
- Use consistent UI components from the design system
- Avoid raw HTML form elements - use UI components instead

## File Organization

- Group related components in feature folders
- Use index files for clean imports
- Separate business logic from UI components
- Use custom hooks for reusable logic
- **Contexts should go into a `contexts` folder** near the page they are used
- **Create context providers** for shared state that needs to be accessed by multiple components
- **Avoid prop drilling** by using React Context for deeply nested component data

## Performance

- Use React.memo for expensive components
- Implement proper dependency arrays in useEffect
- Use useCallback and useMemo for expensive computations
- Lazy load components when appropriate

## Error Boundaries

- Implement error boundaries for component error handling
- Use react-error-boundary package for consistent error handling
- Provide fallback UI for error states

## Form Standards

### Form Structure and Layout

- **Use React Hook Form** with `zodResolver` for validation
- **Form element must wrap all inputs and submit button** - submit button must be inside `<form>` tag
- **Use proper form structure** with clear sections and dividers
- **Implement proper form validation** with Zod schemas
- **Use toast notifications** for success/error feedback instead of inline alerts

### Form Layout Pattern

```tsx
<Form {...form}>
  <form onSubmit={form.handleSubmit(handleSubmit)} className="space-y-8 py-6">
    {/* Form Fields */}
    <div className="space-y-6">
      <FormField
        control={form.control}
        name="fieldName"
        render={({ field }) => (
          <FormItem>
            <FormLabel className="text-foreground mb-3 flex items-center gap-3 text-lg font-semibold">
              <div className="bg-primary/10 flex h-8 w-8 items-center justify-center rounded-lg">
                <FontAwesomeIcon icon={faIcon} className="text-primary h-4 w-4" />
              </div>
              Field Label
            </FormLabel>
            <FormControl>
              <Input
                placeholder="Enter value..."
                className="focus:border-primary/50 h-12 border-2 text-base font-medium transition-colors"
                {...field}
              />
            </FormControl>
            <FormDescription className="text-muted-foreground mt-2 text-sm">Field description</FormDescription>
            <FormMessage />
          </FormItem>
        )}
      />
    </div>

    {/* Divider */}
    <div className="border-border border-t"></div>

    {/* Form Actions - MUST be inside form element */}
    <div className="border-border bg-muted/30 -mx-6 -mb-6 mt-8 border-t px-6 py-6">
      <div className="flex flex-col gap-3 sm:flex-row">
        <Button
          type="button"
          variant="outline"
          size="lg"
          className="hover:bg-muted flex-1 transition-all duration-200"
          onClick={() => handleCancel()}
        >
          Cancel
        </Button>
        <Button
          type="submit"
          size="lg"
          className="bg-primary text-primary-foreground hover:bg-primary/90 flex-1 transition-all duration-200"
        >
          <FontAwesomeIcon icon={faIcon} className="mr-2 h-4 w-4" />
          Submit
        </Button>
      </div>
    </div>
  </form>
</Form>
```

### Form Field Standards

- **Use FormField wrapper** for all form inputs
- **Include proper labels** with icons and consistent styling
- **Add FormDescription** for helpful text
- **Use FormMessage** for validation errors
- **Apply consistent input styling** with focus states and transitions
- **Use proper input types** (Input, Select, Textarea, DateTimePicker)

### Standard Form Label and Icon Sizing

**CRITICAL: Use consistent sizing across all forms for visual harmony.**

#### Required Fields (Primary Styling)

```tsx
<FormLabel className="text-foreground mb-3 flex items-center gap-3 text-lg font-semibold">
  <div className="bg-primary/10 flex h-8 w-8 items-center justify-center rounded-lg">
    <FontAwesomeIcon icon={faIcon} className="text-primary h-4 w-4" />
  </div>
  Field Label
</FormLabel>
```

#### Optional Fields (Muted Styling)

```tsx
<FormLabel className="text-muted-foreground mb-3 flex items-center gap-3 text-lg font-semibold">
  <div className="bg-muted flex h-8 w-8 items-center justify-center rounded-lg">
    <FontAwesomeIcon icon={faIcon} className="text-muted-foreground h-4 w-4" />
  </div>
  Field Label (Optional)
</FormLabel>
```

#### Header Icons (Sheet/Modal Headers)

```tsx
<div className="bg-primary/10 flex h-12 w-12 items-center justify-center rounded-lg">
  <FontAwesomeIcon icon={faIcon} className="text-primary h-6 w-6" />
</div>
```

#### Standard Sizes

- **Field Labels**: `text-lg font-semibold` (both required and optional)
- **Field Icon Containers**: `h-8 w-8` (both required and optional)
- **Field Icons**: `h-4 w-4` (both required and optional)
- **Header Icon Containers**: `h-12 w-12`
- **Header Icons**: `h-6 w-6`
- **Required Fields**: Use `text-foreground` and `bg-primary/10` with `text-primary` icons
- **Optional Fields**: Use `text-muted-foreground` and `bg-muted` with `text-muted-foreground` icons

### Form Validation

- **Define Zod schemas** in separate schema files
- **Use zodResolver** with React Hook Form
- **Implement proper error handling** with toast notifications
- **Validate on submit** and show field-level errors

### Form State Management

- **Use form.reset()** after successful submission
- **Clear error states** after successful operations
- **Handle loading states** during async operations
- **Implement proper form cleanup** on component unmount

### Form Actions

- **Submit button MUST be inside form element** with `type="submit"`
- **Cancel button** should be `type="button"` to prevent form submission
- **Use consistent button styling** and sizing
- **Implement proper click handlers** for cancel actions

### Error Handling

- **Use toast notifications** instead of inline alerts
- **Show success toasts** for completed actions
- **Show error toasts** with descriptive messages
- **Handle API errors** with proper error message extraction

### Form Styling

- **Use consistent spacing** with `space-y-6` and `space-y-8`
- **Apply proper dividers** between form sections
- **Use consistent input heights** (h-12 for main inputs, h-10 for optional)
- **Implement proper focus states** with `focus:border-primary/50`
- **Use consistent border styling** with `border-2`

## Testing

- Write unit tests for business logic
- Test component behavior, not implementation details
- Use React Testing Library for component testing

---

description: React development standards and frontend best practices
globs: ["apps/web/**/*.tsx", "apps/web/**/*.ts", "apps/web/**/*.jsx", "apps/web/**/*.js"]
alwaysApply: true
