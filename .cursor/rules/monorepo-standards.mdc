---
description: Monorepo development standards and package management guidelines
globs: ["**/*.ts", "**/*.tsx", "**/*.js", "**/*.jsx", "**/package.json", "**/turbo.json"]
alwaysApply: true
---

# Monorepo Development Standards

## Package Management

**IMPORTANT: This project uses pnpm exclusively for package management.**

- **Always use pnpm** for package management (configured in [package.json](mdc:package.json))
- **Never use npm or yarn** - this project is configured for pnpm workspaces
- Use workspace dependencies with `workspace:*` syntax
- Keep dependencies consistent across packages
- Use the workspace configuration in [pnpm-workspace.yaml](mdc:pnpm-workspace.yaml)

### Package Management Commands

**Correct (use these):**

- `pnpm install` - Install dependencies
- `pnpm add <package>` - Add dependency
- `pnpm add -D <package>` - Add dev dependency
- `pnpm run <script>` - Run package scripts
- `pnpm run lint` - Run linting
- `pnpm run test` - Run tests
- `pnpm run type-check` - Run TypeScript checking

**Incorrect (never use these):**

- `npm install`, `npm run`, `npm test`
- `yarn install`, `yarn run`, `yarn test`

## Build System

- Use Turbo for build orchestration (configured in [turbo.json](mdc:turbo.json))
- Implement proper task dependencies
- Use caching for faster builds
- Configure proper inputs and outputs for tasks

## Package Structure

- Keep shared logic in packages
- Use clear package boundaries
- Implement proper package exports
- Use TypeScript for all packages

## Development Workflow

### Hybrid Development (Recommended)

1. Start infrastructure: `pnpm infra:up`
2. Start applications: `pnpm dev` (or individual: `pnpm api`, `pnpm bot`, `pnpm web`)
3. Manage infrastructure: `pnpm infra:logs`, `pnpm infra:status`, `pnpm infra:down`

### Local Development

- Use `pnpm dev` to start all applications
- Use `pnpm api`, `pnpm bot`, `pnpm web` for individual services
- Run linting and formatting across all packages
- Use consistent TypeScript configuration

## Code Quality

- Use ESLint configuration from [eslint.config.js](mdc:eslint.config.js)
- Use Prettier configuration from [.prettierrc.json](mdc:.prettierrc.json)
- Run type checking across all packages
- Maintain consistent code style

## Testing Strategy

- Implement tests for each package using `pnpm run test`
- Use vitest for unit testing (configured in packages)
- Use consistent testing frameworks
- Share test utilities across packages
- Implement integration tests for cross-package functionality

## Documentation

- Document package APIs
- Maintain README files for each package
- Document shared types and interfaces
- Keep documentation up to date with code changes

## Deployment

- Use Docker for containerization (see [docker-compose.yml](mdc:docker-compose.yml))
- Implement proper environment configuration
- Use consistent deployment strategies
- Monitor application health

---

description: Monorepo development standards and package management guidelines
globs: ["**/*.ts", "**/*.tsx", "**/*.js", "**/*.jsx", "**/package.json", "**/turbo.json"]
alwaysApply: true
