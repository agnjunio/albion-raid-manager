---
description: TypeScript coding standards and best practices for the Albion Raid Manager project
globs: ["**/*.ts", "**/*.tsx"]
alwaysApply: true
---

# TypeScript Coding Standards

## Code Style

- Use semicolons (configured in [.prettierrc.json](mdc:.prettierrc.json))
- Use double quotes for strings
- 2-space indentation
- 120 character line width
- Trailing commas on all multi-line structures

## TypeScript Best Practices

- Prefer explicit types over `any`
- Use `@typescript-eslint/no-unused-vars` for unused variable warnings
- Ignore unused variables with `_` prefix
- Use strict TypeScript configuration
- Prefer interfaces over type aliases for object shapes
- Use enum values for constants (raid types, roles, etc.)

## Import Organization

Follow the import order defined in [eslint.config.js](mdc:eslint.config.js):

1. Type imports
2. Built-in modules
3. External dependencies
4. Internal workspace packages
5. Parent directory imports
6. Sibling imports
7. Index imports

## Naming Conventions

- Use PascalCase for types, interfaces, and classes
- Use camelCase for variables, functions, and methods
- Use UPPER_SNAKE_CASE for constants
- Use kebab-case for file names

## Error Handling

- Use proper error types and avoid generic `Error`
- Implement proper error boundaries in React components
- Use Zod for runtime type validation
- Handle async operations with try-catch blocks

## Logging Standards

### Error Logging Pattern

**CRITICAL: Always pass errors as object properties, never as second parameters.**

```typescript
// ✅ Correct - Error as object property
logger.error("Operation failed:", { error });
logger.warn("Warning message:", { error });
logger.info("Info with context:", { error, userId, action });

// ❌ Incorrect - Error as second parameter
logger.error("Operation failed:", error);
logger.warn("Warning message:", error);
```

### Benefits of Object Pattern

- **Structured Logging**: Errors are properly nested in log metadata
- **Searchability**: Easy to filter and search logs by error properties
- **Winston Compatibility**: Works better with Winston's structured logging format
- **Consistency**: All logging follows the same pattern across the codebase

### Additional Context

When logging errors, include relevant context:

```typescript
// ✅ Good - Include relevant context
logger.error("Failed to create user:", { 
  error, 
  userId, 
  username, 
  serverId 
});

// ✅ Good - Include operation context
logger.error("Database query failed:", { 
  error, 
  query: "SELECT * FROM users", 
  params: { id: userId } 
});
```

---

description: TypeScript coding standards and best practices for the Albion Raid Manager project
globs: ["**/*.ts", "**/*.tsx"]
alwaysApply: true
